<!DOCTYPE html>
<html>
<head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#">
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>DoAuth: Reclaim your identity</title>


    <meta name="keywords"
        content="technology, functional programming, identity, sovereign identity, verifiable credentials" />
    <meta name="description" content="Fast, lean and reliable authentication server based on verifiable credentials standard" />
    <meta property="og:site_name" content="DoAuth" />
    <meta name="theme-color" content="#161616">
    <link href="<%= Routes.static_path(@conn, "/favicon.ico") %>" rel="shortcut icon" type="image/x-icon" />
    <link rel="sitemap" type="application/xml" title="Sitemap" href="/sitemap.xml">



    <meta property="og:type" content="website">

    <meta itemprop="title" content="DoAuth is a verifiable credentials server, which is a next-gen alternative to the legacy authentication systems." />
    <meta property="og:title" content="DoAuth is a verifiable credentials server, which is a next-gen alternative to the legacy authentication systems." />
    <meta name="twitter:title" content="DoAuth is a verifiable credentials server, which is a next-gen alternative to the legacy authentication systems.">

    <meta name="twitter:image" content="<%= Routes.static_path(@conn, "/images/doauth-card.png") %>" />
    <meta name="twitter:image:src" content="<%= Routes.static_path(@conn, "/images/doauth-card.png") %>"/>
    <meta itemprop="image" content="<%= Routes.static_path(@conn, "/images/doauth-card.png") %>" />
    <meta property="og:image" content="<%= Routes.static_path(@conn, "/images/doauth-card.png") %>"/>
    <meta property="og:image_url" content="<%= Routes.static_path(@conn, "/images/doauth-card.png") %>" />

    <meta itemprop="description"
        content="DoAuth enables everyone to reclaim their identity by providing an open source authentication solution based on modern standards." />
    <meta property="og:description"
        content="DoAuth enables everyone to reclaim their identity by providing an open source authentication solution based on modern standards." />
    <meta name="twitter:description"
        content="DoAuth enables everyone to reclaim their identity by providing an open source authentication solution based on modern standards." />

    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="@doma_dev">
    <meta name="twitter:creator" content="@doma_dev">



    <meta property="og:url" content="https://maja.doma.dev//" />


    <link rel="stylesheet" href="<%= Routes.static_path(@conn, "/css/app.css") %>"/>
    <script defer type="text/javascript" src="<%= Routes.static_path(@conn, "/js/app.js") %>"></script>
    <script defer src="https://unpkg.com/alpinejs"></script>

    <script defer data-api="https://maja.doma.dev/api/event" data-domain="maja.doma.dev"
        src="https://maja.doma.dev/js/p_proxy.js"></script>

    <script defer src="https://unpkg.com/doauthor@0.3.0/dist/sodium.js"></script>
    <script src="https://unpkg.com/doauthor@0.3.0/dist/doauthor.js"></script>
</head>
<body class="bg-black">
  <%= @inner_content %>
</body>
<script>
    window.onload = () => {
        DoAuth.main();
    }
    (async () => {
        const maybePort = () => {
            if (window.location.port) {
                return ':' + window.location.port
            } else {
                return ''
            }
        };
        const localhost = window.location.protocol + '//' + window.location.hostname + maybePort();

        const promise = DoAuthorBootstrapper.main();
        promise.then(
            () => {
                const crypto = doauthor.crypto;
                const gie = DoAuth.itoe("generate-identity");
                var server = doauthor.server;
                if (window.location.hostname === "localhost") {
                    server = localhost;
                }
                gie.onclick = async (e) => {
                    const passe = DoAuth.itoe("the-password");
                    console.log(passe);
                    // TODO: Check if password is empty
                    const mkey = crypto.mainKey(passe.value);
                    const step_mkey = DoAuth.itoe("step-mkey");
                    step_mkey.innerText = doauthor.util.prettyPrint({"main_key": "* * * redacted * * *", "slip": JSON.parse(localStorage.getItem("slip"))});
                    const main_signing_keypair = crypto.deriveSigningKeypair(mkey, 1);
                    const step_skp = DoAuth.itoe("step-skp");
                    step_skp.innerText = doauthor.util.prettyPrint(
                        {"secret": "* * * redacted * * *",
                        "public": doauthor.crypto.show(main_signing_keypair["public"])}
                    );
                    const invite = await fetch(server + "/foreign/invite").then(resp => resp.json());
                    const step_invite = DoAuth.itoe("step-invite");
                    step_invite.innerText = doauthor.util.prettyPrint(invite);
                    const invite_presentation = doauthor.crypto.sign_map(main_signing_keypair, {"verifiableCredential": invite});
                    const step_present = DoAuth.itoe("step-present-invite");
                    step_present.innerText = doauthor.util.prettyPrint(invite_presentation);
                    const fulfillment = await fetch(server + "/users/invite", {
                        headers: {"Content-Type": "application/json"},
                        method: "POST",
                        body: JSON.stringify({
                            public: doauthor.crypto.show(main_signing_keypair["public"]),
                            presentation: invite_presentation
                        })
                    }).then(resp => resp.json());
                    console.log("Invite has been fulfilled by", server, "here it is:", fulfillment);
                    const step_fulfillment = DoAuth.itoe("step-fulfillment");
                    step_fulfillment.innerText = doauthor.util.prettyPrint(fulfillment);
                    const and_further = DoAuth.itoe("and-further");
                    and_further.classList.remove("invisible");
                    and_further.classList.remove("visible");
                }
            }
        )
    })();
</script>
</html>
